syntax = "proto3";

option go_package = "./;protobufs";

import "google/protobuf/timestamp.proto";

package protobufs;


message ClientRequest {
    RequestID request_id = 1;
    bytes payload = 2;
    bytes pubkey = 3;
    bytes signature = 4;
}

message ClientResponse {
    int32 client_sn = 1;
    int32 order_sn = 2;
}

message RequestID {
    int32 client_id = 1;
    int32 client_sn = 2;
}

message Batch {
    int32 sn = 1;
    repeated bytes mb_hash_list = 2;
    repeated SigmapEntry sig_map = 3;
    int32 bucket_id = 4;
}

message SigmapEntry{
    Identifier key = 1;
    MBSig value = 2;
}

message MBSig {
    map<int32, bytes> microblock_sigmap = 1;
}

message FilledBatch {
    repeated ClientRequest Requests = 1;
}




message MissingEntryRequest {
    int32 sn = 1;
    bool payload_request = 2;
}

message MissingEntry {
    int32 sn = 1;
    FilledBatch batch = 2;
    bytes digest = 3;
    bool aborted = 4;
    int32 suspect = 5;
    string proof = 6; // This is a dummy proof. TODO: Implement a proper one, like a Merkle proof wrt. the checkpoint.
}

message BucketSubscription {
    int32 client_id = 1;
}

message BucketAssignment {
    int32 epoch = 1;
    map<int32, ListOfInt32> buckets = 2;
}

message ListOfInt32 {
    repeated int32 vals = 1;
}

// MB部分

message Identifier {
    bytes value = 1;
}

message NodeID {
    int32 value = 1;
}

message Signature {
    bytes value = 1;
}

message Request {
    ClientRequest msg = 1;
    bytes digest = 2;
    bool verified = 3;
    bool in_flight = 4;
}

message MissingMBRequest {
    int32 requester_id = 1;
    int32    bucket_id = 2;
    int32 sn = 3;
    repeated Identifier missing_mb_list = 4;
}

message MicroBlock {
    int32 sn = 1;
    Identifier hash = 2;
    repeated Request txns = 3;
    google.protobuf.Timestamp timestamp = 4;
    google.protobuf.Timestamp future_timestamp = 5;
    int32 sender = 6;
    bool is_requested = 7;
    bool is_forward = 8;
    bytes bitmap = 9;
    int32 hops = 10;
    int32 bucket_id = 11;
}

message Ack {
    int32 receiver = 1;
    Identifier microblock_id = 2;
    Signature signature = 3;
    int32    bucket_id = 4;
}